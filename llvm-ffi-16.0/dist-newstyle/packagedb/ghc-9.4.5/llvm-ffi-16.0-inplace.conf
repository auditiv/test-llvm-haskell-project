name:                 llvm-ffi
version:              16.0
visibility:           public
id:                   llvm-ffi-16.0-inplace
key:                  llvm-ffi-16.0-inplace
license:              BSD-3-Clause
maintainer:           Henning Thielemann <llvm@henning-thielemann.de>
author:               Henning Thielemann, Bryan O'Sullivan, Lennart Augustsson
stability:            experimental
homepage:             http://haskell.org/haskellwiki/LLVM
synopsis:             FFI bindings to the LLVM compiler toolkit.
description:
    FFI bindings to the LLVM compiler toolkit.

    Installation cannot be done fully automatically.
    It would require Cabal code that is bound to certain Cabal versions
    and is prone to fail.
    We give several non-automatic ways
    that also allow you to choose a particular LLVM version.

    First possibility is to point Cabal
    to the LLVM installation directories manually.
    It is recommended to add options to your global @.cabal/config@:

    > extra-include-dirs: /usr/lib/llvm-16/include
    > extra-lib-dirs: /usr/lib/llvm-16/lib

    This works for both @v1-build@ and @v2-build@.
    The shown paths work for Debian and Ubuntu
    using the LLVM repositories at <https://apt.llvm.org/>.
    You can obtain them with

    > llvm-config-16 --includedir --libdir

    You can choose specific LLVM versions per project.
    For @v1-builds@ it works like so:

    > cabal install -fllvm900 --extra-include-dirs=$(llvm-config-9 --includedir) --extra-lib-dirs=$(llvm-config-9 --libdir) yourpackage

    For Nix-style build you must add some options
    to the @cabal.project.local@ file of your LLVM-related project:

    > package llvm-ffi
    >   flags: +llvm900
    >   extra-include-dirs: /usr/lib/llvm-9/include
    >   extra-lib-dirs: /usr/lib/llvm-9/lib

    The second way uses @pkg-config@.
    You can store above paths permanently in a @pkg-config@ file like @llvm.pc@.
    The optimal way would be if LLVM installations or GNU/Linux distributions
    would contain such a file, but they don't.
    Instead, you may generate it using the @llvm-pkg-config@ package
    or write one manually.
    Then you run

    > cabal install -fpkgConfig

    We try to stay up to date with LLVM releases.
    The current version of this package is compatible with LLVM 8-16.
    Please understand that the package may or may not work
    against older LLVM releases.

    Warning for inplace builds:
    Re-configuring the package using, say @-fllvm1100@,
    and re-buildung it might result in corrupt code.
    You must make sure that the stuff in @cbits@ is re-compiled.
    Cabal or GHC may forget about that.
    You are safe if you run @cabal clean@.

    Caution: Ugly crashes can occur
    if you have configured paths for LLVM version X in @.cabal/config@
    and try to build @llvm-ffi@ for a different LLVM version Y.
    Counterintuitively, global search paths have higher precedence
    than local ones: <https://github.com/haskell/cabal/issues/7782>.
    But that does not simply mean
    that the local configuration is ignored completely.
    Instead the local library file is found,
    because its name libLLVM-Y.so is unique,
    whereas the include file names clash,
    thus the ones from the global include directory are used.

category:             Compilers/Interpreters, Code Generation
abi:                  inplace
exposed:              True
exposed-modules:
    LLVM.FFI.Analysis LLVM.FFI.BitReader LLVM.FFI.BitWriter
    LLVM.FFI.Core LLVM.FFI.Core.Attribute LLVM.FFI.ExecutionEngine
    LLVM.FFI.Support.Host LLVM.FFI.Target LLVM.FFI.Transforms.IPO
    LLVM.FFI.Transforms.PassManagerBuilder LLVM.FFI.Transforms.Scalar
    LLVM.FFI.Transforms.Vectorize LLVM.Target.Native

hidden-modules:
    LLVM.FFI.Base LLVM.FFI.Version LLVM.Target.ARM LLVM.Target.Hexagon
    LLVM.Target.MSP430 LLVM.Target.Mips LLVM.Target.NVPTX
    LLVM.Target.PowerPC LLVM.Target.Sparc LLVM.Target.X86
    LLVM.Target.XCore LLVM.Raw.Core LLVM.FFI.Core14

import-dirs:
    /home/jaime/Documents/Haskell_Folder/cabal_prjcts/test-llvm-haskell-project/llvm-ffi-16.0/dist-newstyle/build/x86_64-linux/ghc-9.4.5/llvm-ffi-16.0/build

library-dirs:
    /home/jaime/Documents/Haskell_Folder/cabal_prjcts/test-llvm-haskell-project/llvm-ffi-16.0/dist-newstyle/build/x86_64-linux/ghc-9.4.5/llvm-ffi-16.0/build
    /usr/lib64/llvm14/lib

library-dirs-static:
    /home/jaime/Documents/Haskell_Folder/cabal_prjcts/test-llvm-haskell-project/llvm-ffi-16.0/dist-newstyle/build/x86_64-linux/ghc-9.4.5/llvm-ffi-16.0/build
    /usr/lib64/llvm14/lib

dynamic-library-dirs:
    /home/jaime/Documents/Haskell_Folder/cabal_prjcts/test-llvm-haskell-project/llvm-ffi-16.0/dist-newstyle/build/x86_64-linux/ghc-9.4.5/llvm-ffi-16.0/build
    /usr/lib64/llvm14/lib

data-dir:
    /home/jaime/Documents/Haskell_Folder/cabal_prjcts/test-llvm-haskell-project/llvm-ffi-16.0/.

hs-libraries:         HSllvm-ffi-16.0-inplace
extra-libraries:      stdc++ LLVM-14
include-dirs:
    /usr/lib64/llvm14/include
    /home/jaime/Documents/Haskell_Folder/cabal_prjcts/test-llvm-haskell-project/llvm-ffi-16.0/include
    /home/jaime/Documents/Haskell_Folder/cabal_prjcts/test-llvm-haskell-project/llvm-ffi-16.0/dist-newstyle/build/x86_64-linux/ghc-9.4.5/llvm-ffi-16.0/build/include

depends:
    base-4.17.1.0
    enumset-0.1-aeec08a35f20bc935329f60c0b2398a68cb312d0bbed08761d816ef693473037

haddock-interfaces:
    /home/jaime/Documents/Haskell_Folder/cabal_prjcts/test-llvm-haskell-project/llvm-ffi-16.0/dist-newstyle/build/x86_64-linux/ghc-9.4.5/llvm-ffi-16.0/doc/html/llvm-ffi/llvm-ffi.haddock

haddock-html:
    /home/jaime/Documents/Haskell_Folder/cabal_prjcts/test-llvm-haskell-project/llvm-ffi-16.0/dist-newstyle/build/x86_64-linux/ghc-9.4.5/llvm-ffi-16.0/doc/html/llvm-ffi
